import type { NextApiRequest, NextApiResponse } from "next";
import fs from "fs";
const fsPromises = fs.promises;

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const id = req.query.id as string;
  if (!id) {
    res.status(400).json({
      message: "No cape id provided",
    });
    return;
  } else {
    const capeJSON = JSON.parse(`{
      "SimpleEvieCape": ""
    }
    `);
    // find the cape texture for the given id, the data looks like this:

    if (!capeJSON[id]) {
      res.status(404).json({
        message: "Cape not found",
      });
      return;
    }

    // read the base64 encoded cape texture
    const readCapeTexture: Buffer = Buffer.from(capeJSON[id], "base64");

    // if the cape texture is found, return it
    res.setHeader("Content-Type", "image/png");
    res.status(200).send(readCapeTexture);
  }
}
